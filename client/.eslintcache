[{"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/index.tsx":"1","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/reportWebVitals.ts":"2","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/App.tsx":"3","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/container/Game/Game.tsx":"4","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Board/Board.tsx":"5","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Square/Square.tsx":"6","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Timer/Timer.tsx":"7"},{"size":500,"mtime":1609726984056,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1609726984057,"results":"10","hashOfConfig":"9"},{"size":163,"mtime":1609729607410,"results":"11","hashOfConfig":"9"},{"size":2740,"mtime":1609781755463,"results":"12","hashOfConfig":"9"},{"size":380,"mtime":1609779570980,"results":"13","hashOfConfig":"9"},{"size":415,"mtime":1609781196931,"results":"14","hashOfConfig":"9"},{"size":443,"mtime":1609773465153,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"4h5q05",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/index.tsx",[],["32","33"],"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/reportWebVitals.ts",[],"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/App.tsx",[],"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/container/Game/Game.tsx",["34"],"import { useEffect, useRef, useState } from 'react';\nimport { Board } from '../../components/Board/Board';\nimport { Timer } from '../../components/Timer/Timer';\nimport { ISquare } from '../../components/Square/Square.interface';\nimport styles from './Game.module.css';\n\nconst GAME_LENGTH_SECONDS = 30;\n\nexport const Game = () => {\n  const grid = Array.from(\n    Array(9),\n    (_, index) => ({ id: index + 1, hasMole: false })\n  );\n  let moleInterval = useRef<number>();\n  let timeInterval = useRef<number>();\n  const [score, setScore] = useState(0);\n  const [seconds, setSeconds] = useState(GAME_LENGTH_SECONDS);\n  const [isActive, setIsActive] = useState(false);\n  const [squares, setSquares] = useState(grid);\n  const [molesShowing, setMolesShowing] = useState(0);\n\n  const clearIntervals = () => {\n    window.clearInterval(moleInterval.current);\n    window.clearInterval(timeInterval.current);\n  };\n\n  const reset = () => {\n    setSeconds(GAME_LENGTH_SECONDS);\n    setIsActive(false);\n    setMolesShowing(0);\n    setSquares(\n      squares.map((square: ISquare) => (\n        { ...square, ...{ hasMole: false } }\n      ))\n    );\n  };\n\n  const setHasMole = (item: ISquare): void => {\n    setSquares(\n      squares.map((square: ISquare) => (\n        item.id === square.id ? item : square\n      ))\n    );\n  };\n\n  const onSquareClick = (square: ISquare): void => {\n    setMolesShowing(molesShowing -1);\n    setHasMole({...square, ...{hasMole: false}});\n    setScore(score + 1);\n  };\n\n  const setTimer = () => {\n    if (seconds > 0) {\n      setSeconds(seconds => seconds - 1);\n    }\n\n    if (seconds === 0) {\n      setIsActive(false);\n      clearIntervals();\n    }\n  };\n\n  const toggleRandomMole = (): void => {\n    const randomIndex = Math.floor(Math.random() * 9);\n    const mole = squares[randomIndex];\n    if (!squares[randomIndex].hasMole && molesShowing < 3) {\n      setMolesShowing(molesShowing + 1);\n      setHasMole({ ...mole, ...{ hasMole: true } });\n    } else {\n      setMolesShowing(molesShowing - 1);\n      setHasMole({ ...mole, ...{ hasMole: false } });\n    }\n  };\n\n  const toggle = () => {\n    setIsActive(!isActive);\n  };\n\n  useEffect(() => {\n    if (isActive) {\n      moleInterval.current = window.setInterval(toggleRandomMole, 750);\n      timeInterval.current = window.setInterval(setTimer, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearIntervals();\n    }\n    return () => clearIntervals();\n  }, [isActive, seconds]);\n\n  return (\n    <div className={ styles.game }>\n      <h1>Whack-A-Mole</h1>\n      <h2>Player Score: {score}</h2>\n      <Board squares={ squares } onSquareClick={ onSquareClick }/>\n      <Timer isActive={ isActive } seconds={ seconds } toggle={ toggle } reset={ reset }/>\n    </div>\n  );\n};\n","/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Board/Board.tsx",[],"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Square/Square.tsx",[],"/Users/kamillenorris/Documents/Personal/CodeExercises/whack-a-mole/client/src/components/Timer/Timer.tsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":87,"column":6,"nodeType":"41","endLine":87,"endColumn":25,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTimer' and 'toggleRandomMole'. Either include them or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [isActive, seconds, setTimer, toggleRandomMole]",{"range":"48","text":"49"},[2428,2447],"[isActive, seconds, setTimer, toggleRandomMole]"]